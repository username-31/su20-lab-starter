Exercise 1
	Scenario 1
		1. ??? 
		2. The hit rate is still 0 even if we increase the repcount, since the corresponding cache index of arr[0, 7, 15, 23, 31] is [00, 11, 11, 10, 10], no repeated reference within a block.
		3. Change stepsize to 1 (since the blocksize is 8B, doing so gives us a hit rate of 0.5).

	Scenario 2
		1. Memory is accessed 2 times per iteration of inner loop (Read and Write).
		2. Hit/Miss goes like "MISS, HIT, HIT, HIT" and then repeats. It is easy to figure this out by stepping through the cache.s and observe the Cache Panel.
		3. The hit rate is 0.75, since the hit/miss pattern is "MISS, HIT, HIT, HIT".
		4. The hit rate gradually converges to 100% as we increase the repcount (Actually HR = 1 - (1 / 4 * repcount)). Because nearby memory addresses are more frequently accessed as repcount increases.
		5. (In short) Consider BLOCKSIZE as step size. 

	Scenario 3
		1. L1 cache hit rate is 0.5, L2 cache hit rate is 0.
		2. 32 accesses to L1 cache, 16 missed.
		3. 16 accessse to L2 cache, since there are 16 accesses missed in L1 cache.
		4. Changing repcount increases L2 hit rate and keeps L1 hit rate the same. Because during the 1st rep, more array elements are loaded into cache so that they can be accessed more easily later.
		5. Increasing the number of blocks in L1 does not affect L1 and L2 hit rate (since hashing, same elements are placed at the same index). Increasing L1 blocksize increases L1 hit rate but not L2 hit rate, since bigger L1 blocksize allows more array elements being put in L1 cache.

Exercise 2
	ijk: n = 1000, 1.980
	ikj: n = 1000, 0.155
	jik: n = 1000, 1.694
	jki: n = 1000, 9.067
	kij: n = 1000, 0.154
	kji: n = 1000, 8.053

	1. jki is the best, since 
	2. ikj is the worst, 
	3.

Exercise 3
	Part 1
		blocksize = 20, n = 100: 0.008ms, 0.006ms 
		blocksize = 20, n = 1000: 1.715ms, 0.923ms
		blocksize = 20, n = 2000: 40.93ms, 6.568ms
		blocksize = 20, n = 5000: 265.23ms, 29.92ms
		blocksize = 20, n = 10000: 1198.69ms, 146.149ms

		1. At the beginning(?).
		2. 

	Part 2
		blocksize = 50, n = 10000: 1377.83ms, 170.77ms
		blocksize = 100, n = 10000: 1215.07ms, 108.438ms
		blocksize = 500, n = 10000: 1503.24ms, 128.951ms
		blocksize = 1000, n = 10000: 1257.09ms, 191.377ms
		blocksize = 5000, n = 10000: 1321.86ms, 1302.13ms

		1. The miss rate goes up while the matrix is small (a 2x2 may fills the cache full), then goes up while the matrix grow larger (a 20 x 20 may require spatial locality).
